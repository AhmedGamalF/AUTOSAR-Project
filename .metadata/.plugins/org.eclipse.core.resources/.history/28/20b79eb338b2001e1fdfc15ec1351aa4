/******************************************************************************
 *
 * Module: Port
 *
 * File Name: Port.c
 *
 * Description: Source file for TM4C123GH6PM Microcontroller - Port Driver.
 *
 * Author: Ahmed_Gamal
 ******************************************************************************/

#include "Port.h"
#include "PORT.Regs.h"

/* AUTOSAR Version checking between Det and Port Modules */
#if (PORT_DEV_ERROR_DETECT == STD_ON)

#include "Det.h"
/* AUTOSAR Version checking between Det and Port Modules */
#if ((DET_AR_MAJOR_VERSION != PORT_AR_RELEASE_MAJOR_VERSION)\
        || (DET_AR_MINOR_VERSION != PORT_AR_RELEASE_MINOR_VERSION)\
        || (DET_AR_PATCH_VERSION != PORT_AR_RELEASE_PATCH_VERSION))
#error "The AR version of Det.h does not match the expected version"
#endif

#endif

/*
 * Port_Status : Holds the status of the Port Driver
 * Port_PortChannels : a pointer to structure initialized as a null pointer
 */
STATIC uint8 Port_Status = PORT_NOT_INITIALIZED;
STATIC const Port_ConfigType * Port_PinPtr = NULL_PTR;



/************************************************************************************
 * Service Name: Port_Init
 * Sync/Async: Synchronous
 * Reentrancy: reentrant
 * Parameters (in): ConfigPtr - Pointer to post-build configuration data
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: None
 * Description: Function to initialize ALL ports and port pins with the
 * configuration set pointed to by the parameter
 ************************************************************************************/
void Port_Init(const Port_ConfigType* ConfigPtr)
{
        boolean error = FALSE;

#if (PORT_DEV_ERROR_DETECT == STD_ON)
    /* check if the input configuration pointer is not a NULL_PTR */
    if (NULL_PTR == ConfigPtr)
    {
        Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID,PORT_E_PARAM_CONFIG);
        error =TRUE ;
    }
    else
    {
        /* DO Nothing */
    }
#endif

    if(FALSE== error)
    {
        /* Pointer to carry the port */
        volatile uint32* Ptr_Port = NULL_PTR;
        Port_PinType Port_PinID = PORT_ZERO ;
        Port_Status = PORT_NOT_INITIALIZED ; /* Reinitialize the port state */
        Port_PinPtr = ConfigPtr->Pins;  /* Point to address of  the first  Pin (index of the array) */


        for(Port_PinID = PORT_ZERO ; Port_PinID < PORT_CONFIGURED_PINS; Port_PinID++)
        {
            switch (Port_PinPtr->Pins[port-Port_PinID].Port_Num)
            {
            case 0: Ptr_Port = (volatile uint32 *)GPIO_PORTA_BASE_ADDRESS ; /* PORTA Base Address */
            break;

            case 1: Ptr_Port = (volatile uint32 *)GPIO_PORTB_BASE_ADDRESS ; /* PORTB Base Address */
            break;

            case 2: Ptr_Port = (volatile uint32 *)GPIO_PORTC_BASE_ADDRESS ; /* PORTC Base Address */
            break;

            case 3: Ptr_Port = (volatile uint32 *)GPIO_PORTD_BASE_ADDRESS ; /* PORTD Base Address */
            break;

            case 4: Ptr_Port = (volatile uint32 *)GPIO_PORTE_BASE_ADDRESS ; /* PORTE Base Address */
            break;

            case 5: Ptr_Port = (volatile uint32 *)GPIO_PORTF_BASE_ADDRESS ; /* PORTF Base Address */
            break;

            default: /* No Action Required */
                break;
            }

            if( ((Port_PinPtr->Pins[Port_PinID].Port_Num == 3) && (Port_PinPtr->Pins[Port_PinID].Pin_Num == 7)) || ((Port_PinPtr[Port_PinID].PortNum == 5) && (Port_PinPtr[Port_PinID].PinNum == 0)) ) /* PD7 or PF0 */
            {
                *(volatile uint32 *)((volatile uint8 *)Port_Ptr + PORT_LOCK_REG_OFFSET) = 0x4C4F434B;                                 /* Unlock the GPIOCR register */
                SET_BIT(*(volatile uint32 *)((volatile uint8 *)Port_Ptr + PORT_COMMIT_REG_OFFSET) , Port_PinPtr[Port_PinID].PinNum);  /* Set the corresponding bit in GPIOCR register to allow changes on this pin */
            }

            else
            {
                /* Do Nothing ... */
            }

            /* Select the Pin Direction */
            switch (PIN_Direction)
            {
            case PORT_PIN_IN: CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIR_REG_OFFSET) , PIN_NUM) ; /* Corresponding pin is an input*/

            /* Select the Pin Resistor */
            switch (PIN_Resistor)
            {
            case PULL_DOWN: CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIR_REG_OFFSET) , PIN_NUM) ; /* Corresponding Resistor is an Pull Down*/
            break;

            case PULL_UP: SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIR_REG_OFFSET) , PIN_NUM) ; /* Corresponding Resistor is an Pull UP*/
            break;

            default:
                /* Do Nothing ... */
                break;
            }
            break;

            case PORT_PIN_OUT: SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIR_REG_OFFSET) , PIN_NUM) ; /* Corresponding pin is an output*/

            /* Select the Pin Level */
            switch (PIN_Init_Level)
            {
            case PORT_PIN_LEVEL_LOW: CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIR_REG_OFFSET) , PIN_NUM) ; /* Corresponding PIN Level is Low */
            break;

            case PORT_PIN_LEVEL_HIGH: SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIR_REG_OFFSET) , PIN_NUM) ; /* Corresponding  PIN Level is High*/
            break;

            default:
                /* Do Nothing ... */
                break;
            }
            break;

            default:
                /* Do Nothing ... */
                break;
            }
            /* PIN Mode*/
            if(PORT_PIN_MODE_DIO == PIN_Mode)
            {
                CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ANALOG_MODE_SEL_REG_OFFSET) ,PIN_NUM);      /* Disable analog functionality on this pin */
                CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ALT_FUNC_REG_OFFSET) , PIN_NUM);             /* Disable Alternative function */

                *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_CTL_REG_OFFSET) &= ~(0x0000000F << (PIN_NUM * 4));     /* Clear the PMC   bits for this pin */
                SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIGITAL_ENABLE_REG_OFFSET) , PIN_NUM);         /* Enable digital functionality on this pin */
            }
            else if (PORT_PIN_MODE_ADC == PIN_Mode)
            {
                SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ANALOG_MODE_SEL_REG_OFFSET) ,PIN_NUM);        /*  Enable analog functionality on this pin */
                CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ALT_FUNC_REG_OFFSET) , PIN_NUM);             /* Disable Alternative function for this pin */

                *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_CTL_REG_OFFSET) &= ~(0x0000000F << (PIN_NUM * 4));     /* Clear the PMC bits for this pin */
                CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIGITAL_ENABLE_REG_OFFSET) , PIN_NUM);       /* Disable digital functionality on this pin */

            }
            else
            {
                CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ANALOG_MODE_SEL_REG_OFFSET) , PIN_NUM);        /*  Disable analog functionality on this pin */
                SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ALT_FUNC_REG_OFFSET) ,  PIN_NUM);             /* Enable Alternative function */

                *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_CTL_REG_OFFSET) &= ~(0x0000000F << (PIN_NUM * 4));   /* Clear the PMC bits for this pin */
                *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_CTL_REG_OFFSET) |= ( PIN_Mode << (PIN_NUM* 4));      /* Set the PMC bits for this pin */

                SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIGITAL_ENABLE_REG_OFFSET) , PIN_NUM);         /* Enable digital functionality on this pin */
            }

        }
    }
}
else
{
    /* No Action Required */
}
}

/************************************************************************************
 * Service Name: Port_SetPinDirection
 * Sync/Async: Synchronous
 * Reentrancy: reentrant
 * Parameters (in): Port Pin ID number , Port Pin Direction
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: None
 * Description: Function to :
 *              - Setup the port pin direction during runtime.
 ************************************************************************************/
#if(PORT_SET_PIN_DIRECTION_API == STD_ON)
void Port_SetPinDirection(Port_PinType Pin,Port_PinDirectionType Direction)
{
    boolean Error = FALSE ;
    volatile uint32 * Ptr_Port = NULL_PTR; /* point to the base address of the Port  */
    Port_PinType Port_Index=ZERO;
    Port_PinType Pin_Index=ZERO;
    uint8 counter=ZERO;

    /* Get the port number and pin number */
    for(Port_Index=ZERO; Port_Index<PORT_NUMBER_OF_PORTS;Port_Index++)
    {
        for(Pin_Index=ZERO; Pin_Index<PORT_NUMBER_OF_PINS;Pin_Index++)
        {
            counter++;
            if(counter==Pin)
            {
                break;
            }
        }
    }
#if(PORT_DEV_ERROR_DETECT == STD_ON)
    /* Check if the Driver is initialized before using this function */
    if(PORT_Status != PORT_INITIALIZED)
    {
        Det_ReportError(PORT_MODULE_ID,PORT_INSTANCE_ID,PORT_SET_PIN_DIRECTION_SID,PORT_E_UNINIT);
        Error = TRUE ;
    }
    else
    {
        /* Do Nothing */
    }

    /* Check if the used Pin is within the valid range */
    if(Pin >= PORT_CONFIGURED_PINS)
    {
        Det_ReportError(PORT_MODULE_ID,PORT_INSTANCE_ID,PORT_SET_PIN_DIRECTION_SID,PORT_E_PARAM_PIN);
        Error = TRUE ;
    }
    else
    {
        /* Do Nothing */
    }

    /* Check if the used pin configured as changeable or not */
    if(Port_PinPtr[Port_Index][Pin_Index].DirectionChangeable == STD_OFF)
    {
        Det_ReportError(PORT_MODULE_ID,PORT_INSTANCE_ID,PORT_SET_PIN_DIRECTION_SID,PORT_E_DIRECTION_UNCHANGEABLE);
        Error = TRUE ;
    }
    else
    {
        /* Do Nothing */
    }
#endif

    if(Error != TRUE)
    {
        switch(Port_PinPtr[Port_Index][Pin_Index].PortNum)
        {
        case  0:
            Ptr_Port = (volatile uint32 *)GPIO_PORTA_BASE_ADDRESS; /* PORTA Base Address */
            break;
        case  1:
            Ptr_Port = (volatile uint32 *)GPIO_PORTB_BASE_ADDRESS; /* PORTB Base Address */
            break;
        case  2:
            Ptr_Port = (volatile uint32 *)GPIO_PORTC_BASE_ADDRESS; /* PORTC Base Address */
            break;
        case  3:
            Ptr_Port = (volatile uint32 *)GPIO_PORTD_BASE_ADDRESS; /* PORTD Base Address */
            break;
        case  4:
            Ptr_Port = (volatile uint32 *)GPIO_PORTE_BASE_ADDRESS; /* PORTE Base Address */
            break;
        case  5:
            Ptr_Port = (volatile uint32 *)GPIO_PORTF_BASE_ADDRESS; /* PORTF Base Address */
            break;
        default:
            /* Do Nothing */
            break;
        }

        if( ((Port_PinPtr[Port_Index][Pin_Index].PortNum == 3) && (Port_PinPtr[Port_Index][Pin_Index].PinNum == 7)) || ((Port_PinPtr[Port_Index][Pin_Index].PortNum == 5) && (Port_PinPtr[Port_Index][Pin_Index].PinNum == 0)) ) /* PD7 or PF0 */
        {
            *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_LOCK_REG_OFFSET) = LOCK_REG_VALUE;                              /* Unlock the GPIOCR register */
            SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_COMMIT_REG_OFFSET) , Port_PinPtr[Port_Index][Pin_Index].PinNum);  /* Set the corresponding bit in GPIOCR register to allow changes on this pin */
        }
        else
        {
            /* Do Nothing */
        }

        switch(Direction)
        {
        case PORT_PIN_OUT:
            SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIR_REG_OFFSET) , Port_PinPtr[Port_Index][Pin_Index].PinNum);               /* Set the PIN as output pin */
            break;
        case PORT_PIN_IN:
            CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIR_REG_OFFSET) , Port_PinPtr[Port_Index][Pin_Index].PinNum);             /* Set the PIN as input pin */
            break ;
        default:
            /* Do nothing */
            break;
        }

    }
    else
    {
        /* Do Nothing */
    }

}
#endif
/************************************************************************************
 * Service Name: Port_RefreshPortDirection
 * Sync/Async: Synchronous
 * Reentrancy: reentrant
 * Parameters (in): None
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: None
 * Description: Function to refresh the direction
 * of all configured ports to the configured direction
 ************************************************************************************/
void Port_RefreshPortDirection(void)
{
#if(PORT_DEV_ERROR_DETECT == STD_ON)
    /* Check if the Driver is initialized before using this function */
    if(Port_Status != PORT_INITIALIZED)
    {
        Det_ReportError(PORT_MODULE_ID,PORT_INSTANCE_ID,PORT_RefreshPortDirection_SID,PORT_E_UNINIT);
    }
    else
#endif
    {
        Port_PinType Port_ID = PORT_ZERO ;         /*Port Pin ID */
        Port_PinType Pin_ID = PIN_ZERO ;         /*PIN Pin ID */
        volatile uint32 * Ptr_Port = NULL_PTR; /* point to the base address of the Port  */


        for(Port_ID = PORT_ZERO ; Port_ID <PORT_NUMBER_OF_PORTS; Port_ID++)
        {

            for(Pin_ID = PIN_ZERO ; Pin_ID <PORT_NUMBER_OF_PORTS; Pin_ID++)
            {
                switch (Port_ID)
                {
                case 0: Ptr_Port = (volatile uint32 *)GPIO_PORTA_BASE_ADDRESS ; /* PORTA Base Address */
                break;

                case 1: Ptr_Port = (volatile uint32 *)GPIO_PORTB_BASE_ADDRESS ; /* PORTB Base Address */
                break;

                case 2: Ptr_Port = (volatile uint32 *)GPIO_PORTC_BASE_ADDRESS ; /* PORTC Base Address */
                break;

                case 3: Ptr_Port = (volatile uint32 *)GPIO_PORTD_BASE_ADDRESS ; /* PORTD Base Address */
                break;

                case 4: Ptr_Port = (volatile uint32 *)GPIO_PORTE_BASE_ADDRESS ; /* PORTE Base Address */
                break;

                case 5: Ptr_Port = (volatile uint32 *)GPIO_PORTF_BASE_ADDRESS ; /* PORTF Base Address */
                break;

                default: /* No Action Required */
                    break;
                }

                if( ((Port_PinPtr->Pins[Port_ID][Pin_ID].Port_Num== 3) && (Port_PinPtr->Pins[Port_ID][Pin_ID].Pin_Num == 7)) || ((Port_PinPtr->Pins[Port_ID][Pin_ID].Port_Num == 5) && (Port_PinPtr->Pins[Port_ID][Pin_ID].Pin_Num == 0)) ) /* PD7 or PF0 */
                {
                    *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_LOCK_REG_OFFSET) = LOCK_REG_VALUE ;   /* Allow to modifiy the status of the GPIOCR register */
                    SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_COMMIT_REG_OFFSET) , Port_PinPtr->Pins[Port_ID][Pin_ID].Pin_Num);  /*  determines the GPIOCR register status*/
                }
                else
                {
                    /* Do Nothing ... */
                }


                switch(Port_PinPtr->Pins[Port_ID][Pin_ID].Direction)
                {
                case PORT_PIN_OUT:
                    SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIR_REG_OFFSET) , Port_PinPtr->Pins[Port_ID][Pin_ID].Pin_Num);               /* Set the corresponding bit in the GPIODIR register to configure it as output pin */
                    break;
                case PORT_PIN_IN:
                    CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIR_REG_OFFSET) , Port_PinPtr->Pins[Port_ID][Pin_ID].Pin_Num);             /* Clear the corresponding bit in the GPIODIR register to configure it as input pin */
                    break ;
                default:
                    /* Do nothing */
                    break;
                }
            }
        }
    }

    /************************************************************************************
     * Service Name: Port_GetVersionInfo
     * Sync/Async: Synchronous
     * Reentrancy: reentrant
     * Parameters (in): None
     * Parameters (inout): None
     * Parameters (out): Pointer to where to store the version information of this module.
     * Return value: None
     * Description: Function to return the version information of this module.
     ************************************************************************************/
#if(PORT_VERSION_INFO_API == STD_ON)
    void Port_GetVersionInfo(Std_VersionInfoType* versioninfo)
    {
#if(PORT_DEV_ERROR_DETECT == STD_ON)
        /* Check if the Driver is initialized before using this function */
        if(versioninfo += NULL_PTR)
        {
            Det_ReportError(PORT_MODULE_ID,PORT_INSTANCE_ID,PORT_GET_VERSION_INFO_SID,PORT_E_PARAM_POINTER);
        }
        else
#endif

        {
            /* Copy the vendor Id */
            versioninfo->vendorID = (uint16)PORT_VENDOR_ID;
            /* Copy the module Id */
            versioninfo->moduleID = (uint16)PORT_MODULE_ID;
            /* Copy Software Major Version */
            versioninfo->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
            /* Copy Software Minor Version */
            versioninfo->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
            /* Copy Software Patch Version */
            versioninfo->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
        }


    }
#endif
    /************************************************************************************
     * Service Name: Port_SetPinMode
     * Sync/Async: Synchronous
     * Reentrancy: reentrant
     * Parameters (in): Port Pin ID number , New Port Pin mode to be set on port pin
     * Parameters (inout): None
     * Parameters (out): None
     * Return value: None
     * Description: Function to set the port pin mode of the referenced pin during runtime.
     ************************************************************************************/
#if(PORT_SET_PIN_MODE_API == STD_ON)
    void Port_SetPinMode(Port_PinType Pin,Port_PinModeType Mode)
    {
        boolean Error=FALSE;
        volatile uint32 * Ptr_Port = NULL_PTR; /* point to the base address of the Port  */
        Port_PinType Port_Index=ZERO;
        Port_PinType Pin_Index=ZERO;
        uint8 counter=ZERO;

        /* get the port number and pin number */
        for(Port_Index=ZERO; Port_Index<PORT_NUMBER_OF_PORTS;Port_Index++)
        {
            for(Pin_Index=ZERO;Pin_Index<PORT_NUMBER_OF_PINS;Pin_Index++)
            {
                counter++;
                if(counter==Pin)
                {
                    break;
                }
            }
        }

#if(PORT_DEV_ERROR_DETECT == STD_ON)
        /* Check if the Driver is initialized before using this function */
        if(PORT_Status != PORT_INITIALIZED)
        {
            Det_ReportError(PORT_MODULE_ID,PORT_INSTANCE_ID,PORT_SET_PIN_DIRECTION_SID,PORT_E_UNINIT);
            Error = TRUE ;
        }
        else
        {
            /* Do Nothing */
        }

        /* Check if the used Pin is within the valid range */
        if(Pin >= PORT_CONFIGURED_PINS)
        {
            Det_ReportError(PORT_MODULE_ID,PORT_INSTANCE_ID,PORT_SET_PIN_DIRECTION_SID,PORT_E_PARAM_PIN);
            Error = TRUE ;
        }
        else
        {
            /* Do Nothing */
        }

        /* Check if the used pin configured as changeable or not */
        if(Port_PinPtr[Port_Index][Pin_Index].ModeChangeable == STD_OFF)
        {
            Det_ReportError(PORT_MODULE_ID,PORT_INSTANCE_ID,PORT_SET_PIN_MODE_SID,PORT_E_MODE_UNCHANGEABLE);
            Error = TRUE ;
        }
        else
        {
            /* Do Nothing */
        }

        /* Check if the pin mode is valid or not  */
        if(Mode > PORT_PIN_MODE_DIO)
        {
            Det_ReportError(PORT_MODULE_ID,PORT_INSTANCE_ID,PORT_SET_PIN_MODE_SID,PORT_E_PARAM_INVALID_MODE);
            Error = TRUE ;
        }
        else
        {
            /* Do Nothing */
        }
#endif



        if(FALSE==Error)
        {
            switch(Port_PinPtr[Port_Index][Pin_Index].PortNum)
            {
            case  0:
                Ptr_Port = (volatile uint32 *)GPIO_PORTA_BASE_ADDRESS; /* PORTA Base Address */
                break;
            case  1:
                Ptr_Port = (volatile uint32 *)GPIO_PORTB_BASE_ADDRESS; /* PORTB Base Address */
                break;
            case  2:
                Ptr_Port = (volatile uint32 *)GPIO_PORTC_BASE_ADDRESS; /* PORTC Base Address */
                break;
            case  3:
                Ptr_Port = (volatile uint32 *)GPIO_PORTD_BASE_ADDRESS; /* PORTD Base Address */
                break;
            case  4:
                Ptr_Port = (volatile uint32 *)GPIO_PORTE_BASE_ADDRESS; /* PORTE Base Address */
                break;
            case  5:
                Ptr_Port = (volatile uint32 *)GPIO_PORTF_BASE_ADDRESS; /* PORTF Base Address */
                break;
            default:
                /* Do Nothing */
                break;
            }

            if( ((Port_PinPtr[Port_Index][Pin_Index].PortNum == 3) && (Port_PinPtr[Port_Index][Pin_Index].PinNum == 7)) || ((Port_PinPtr[Port_Index][Pin_Index].PortNum == 5) && (Port_PinPtr[Port_Index][Pin_Index].PinNum == 0)) ) /* PD7 or PF0 */
            {
                *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_LOCK_REG_OFFSET) = LOCK_REG_VALUE;                              /* Unlock the GPIOCR register */
                SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_COMMIT_REG_OFFSET) , Port_PinPtr[Port_Index][Pin_Index].PinNum);  /* Set the corresponding bit in GPIOCR register to allow changes on this pin */
            }
            else
            {
                /* Do Nothing */
            }

            /* PIN Mode*/
            if(PORT_PIN_MODE_DIO == PIN_Mode)
            {
                CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ANALOG_MODE_SEL_REG_OFFSET) ,Port_PinPtr[Port_Index][Pin_Index].Pin_Num);      /* Disable analog functionality on this pin */
                CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ALT_FUNC_REG_OFFSET) , Port_PinPtr[Port_Index][Pin_Index].Pin_Num);             /* Disable Alternative function */

                *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_CTL_REG_OFFSET) &= ~(0x0000000F << (Port_PinPtr[Port_Index][Pin_Index].Pin_Num * 4));     /* Clear the PMC   bits for this pin */
                SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIGITAL_ENABLE_REG_OFFSET) , Port_PinPtr[Port_Index][Pin_Index].Pin_Num);         /* Enable digital functionality on this pin */
            }
            else if (PORT_PIN_MODE_ADC == PIN_Mode)
            {
                SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ANALOG_MODE_SEL_REG_OFFSET) ,Port_PinPtr[Port_Index][Pin_Index].Pin_Num);        /*  Enable analog functionality on this pin */
                CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ALT_FUNC_REG_OFFSET) , Port_PinPtr[Port_Index][Pin_Index].Pin_Num);             /* Disable Alternative function for this pin */

                *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_CTL_REG_OFFSET) &= ~(0x0000000F << (Port_PinPtr[Port_Index][Pin_Index].Pin_Num * 4));     /* Clear the PMC bits for this pin */
                CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIGITAL_ENABLE_REG_OFFSET) , Port_PinPtr[Port_Index][Pin_Index].Pin_Num);       /* Disable digital functionality on this pin */

            }
            else
            {
                CLEAR_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ANALOG_MODE_SEL_REG_OFFSET) , Port_PinPtr[Port_Index][Pin_Index].Pin_Num);        /*  Disable analog functionality on this pin */
                SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_ALT_FUNC_REG_OFFSET) ,  Port_PinPtr[Port_Index][Pin_Index].Pin_Num);             /* Enable Alternative function */

                *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_CTL_REG_OFFSET) &= ~(0x0000000F << (Port_PinPtr[Port_Index][Pin_Index].Pin_Num * 4));   /* Clear the PMC bits for this pin */
                *(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_CTL_REG_OFFSET) |= ( Port_PinPtr[Port_Index][Pin_Index].Mode << (Port_PinPtr[Port_Index][Pin_Index].Pin_Num* 4));      /* Set the PMC bits for this pin */

                SET_BIT(*(volatile uint32 *)((volatile uint8 *)Ptr_Port + PORT_DIGITAL_ENABLE_REG_OFFSET) , Port_PinPtr[Port_Index][Pin_Index].Pin_Num);         /* Enable digital functionality on this pin */
            }

        }

    }
#endif

